									CURSO COMPLETO MYSQL

Source: https://www.youtube.com/watch?v=_8MjEhfKRbI&ab_channel=LucasMoy

Una base de datos realmente se explica lo que hace por su nombre,y es simplemente una herramienta para almacenar datos.Con el tiempo se han vuelto más complejas,con mejores interfaces y funcionalidades.

Las DB guardan los datos en computadoras,normalmente en Data Centers con un gran nº de ellas.Es decir que guardan los datos de forma centralizada(en un único lugar)

NOTA: hoy en día se ha agregado un nuevo tipo de base de datos,que son las blockchain,son bases de datos descentralizadas,ya que la componen cientos de computadoras,esto conlleva ciertas ventajas,como la veracidad de la data.

Las DB se dividen en dos grupos: relacionales y no-relacionales.

Una DB relacional es aquella que se basa en la relaciones que los datos tienen entre sí,y no se tienen en cuenta su orden de almacenamiento.En este tipo de DB los datos se guardan en tablas compuestas por filas y columnas.
En la imagen puedo ver que hay 5 tablas relacionadas entre si.Esto implicará usar llaves primarias y foráneas.

Las DB no-relacionales están diseñadas para modelos de datos especificos,y tienen esquemas flexibles para aplicaciones modernas.Son fáciles de desarrollar,tienen un gran rendimiento y además son escalables.
Dado que todas las requests usan JSON y estas db usan JSON su integración es total.Redes sociales como Facebook la usaron debido a su flexibilidad y escalabilidad(varios gestores DB sincronizados en diferentes servers).

La más famosa es MongoDb,luego está CouchDB,la cual está mejor preparada para la sincronización,o también Firebase,DynamoDB,etc...(SaaS). 
Hay muchas más como Hadoop o Cassandra(son NoSQL??)

					DIFERENCIAS ENTRE SQL Y NO-SQL

La principal diferencia podría ser la madurez,ya que SQL lleva mucho tiempo en el mercado.
La segunda podría ser la atomicidad(transacciones).
Los estandares están bien definidos
La escritura es bastante sencilla(SQL).

La principal desventaja es el crecimiento,cuando hay muchas tablas las queries pueden tardar mucho,y también suelen presentar fallas en el momento de la respuesta.
También es dificil realizar cambios en una DB.

En cuanto a No-SQL como ventaja tiene que es muy flexible,es sumamente fácil agregar un campo o cambiar la estructura de la DB.
TAmbién pueden escalar horizontalmente(replicacion o arquitectura distribuida).Si el rendimiento bajara se pueden instalar nuevos nodos para balancear la carga del trabajo fácilmente(crecimiento o escalabilidad horizontal).

La principal desventaja de NoSQL es la atomicidad,la información en ocasiones no es consistente,dependiendo de los nodos en los que este replicada la DB.

A la hora de elegir una DB hay que observar como se comportarán los datos.Si voy a desarrollar una aplicación donde sé que los datos tendrán una estructura bien definida iré bien con SQL,si por el contrario necesitaré flexibilidad mejor usar NoSQL.

					COMO DISEÑAR UNA DB RELACIONAL

Lo primero que hay que preguntarse es cúando debo diseñar la DB.La mayoría de proyectos comienzan definiendo los requerimientos que va a tener el sistema.
Despues se desarrollan pantallas de como se verá la app(schemas).En este momento ya estamos preparados para diseñar una DB temporal inicial.

No se debe ser inflexible en modificar esa DB inicial.Es posible que termine siendo algo diferente al diseño inicial.

Es importante predecir lo más ajustado posible todos los componentes que va a necesitar nuestro sistema,aunque es muy dificil hacerlo al 100% en el principio.

						TIPOS DE DATOS GENÉRICOS

Normalmente los lenguajes SQL suelen tener estos tipos de datos:
char(tamaño) : entre 0 y 256 caracteres
varchar(tamaño): entre 0 y 65.535
text: para textos largos
TinyInt(tamaño): -128 a 127
Int(tamaño): -2147483648 a 2147483647
BingInt(tamaño): -92233372036854775808 a 92233372036854775807
Double(tamaño,d): numeros grandes con coma decimal
Date: 2021-09-10
DateTime: 2021-09-10 10:05:05
TimeStamp: 2021:09-10 10:05:05

Fijate que Date solo guarda la fecha,mientras que DateTime guarda la hora.TimeStamp funciona igual que DateTime,pero lo van a quitar en el 2038,asi que es mejor no usarlo.

						DISEÑADORES DE BASES DE DATOS

Para armar el diseño de DB puedo usar cualquier herramienta que lo permita.A la hora de relacionar las tablas tengo que pensar en las cardinalidades.
Tomando nuestro diagrama de Academias-Alumnos-Profesores y Cursos:

¿Un alumno puede matricularse en varias academias? <- sólo en una(luego le pongo academia_id)
¿Una academia puede tener varios alumnos?Si
¿Una academia puede tener varios profesores? Si

¿Un profesor puede dar clase en varias academias? <- sólo en una en este ejemplo(luego academia_id)

¿Un curso puede ser dictado por un sólo profesor? <- diremos que si,luego usaré profesor_id como nombre de la FK.Si fuera una relación n a m usaría profesores_id(?)

¿Un alumno puede estar matriculado en varios cursos?Si,¿y un curso puede recibir varios alumnos?Pues también.
IMPORTANTE: recuerda que cuando se da una relación ManyToMany en SQL se crea una tabla intermedia.
La llamaremos Alumnos_por_cursos(puede tener cualquier nombre,pero que sea explicativo).Tendrá su id como PK,pero aparte dos campos más que serán FK

Por último vamos a crear otra tabla notas.Fijate que podria tener como id la union del alumno y el curso,pero de momento lo haremos simple.

NOTA:para generar el SQL desde un Diagrama:
File->Export->Forward Engineer SQL CREATE Script
En cuanto al lenguaje con utf8_bin Lucas asegura que no hay problemas.

IMPORTANTE: una foreign key será un index.Un index normal puede ser null mientras que una Primary Key no puede ser null.

				RESTRICCIONES DE INTEGRIDAD REFERENCIAL

Las relaciones existentes entre distintas tablas de una base de datos MySQL que utiliza el motor de almacenamiento InnoDB pueden estar especificadas en forma de restricciones de clave externa(Foreign Key Constraints) de manera que la propia base de datos impida que se realicen operaciones que provocarían inconsistencias

El comportamiento por defecto de una Foreign Key es impedir un cambio en la base de datos como consecuencia de una sentencia Delete o Update,si esta trajera como consecuencia un fallo en la integridad referencial

RESTRICT: es el comportamiento por defecto recién citado,que impide modificaciones que atenten contra la integridad referencial.
* Si intento borrar un profesor que tenga una academia asignada no lo hará,es decir bloquea cualquier registro referenciado(salvaguardando asi la integridad referencial mencionada).

CASCADE: borrará todos los registros e,incluso,si el registro en la tabla referenciada queda huerfáno también lo borra.

SET NULL: establece a null el valor de la FK cuando se elimina el registro de la tabla principal.Si quedará huerfáno también borraría ese campo referenciado.

NO ACTION: igual que RESTRICT.

Resumen:
CASCADE: Cuando se hace UPDATE/DELETE en la tabla padre, automáticamente se actualizarán/borrarán las filas relacionadas de la tabla hija.

SET NULL: Cuando se hace UPDATE/DELETE en la tabla padre, las claves foráneas de las filas relacionadas en la tabla hija se pondrán a NULL. Es importante asegurarse que esos campos no tendrán la restricción de NOT NULL o podrás recibir errores.
RESTRICT: si se intenta hacer una acción de UPDATE/DELETE en la tabla padre ésta será rechazada automáticamente.

NO ACTION: Ésta es una palabra clave de SQL, en MySQL es equivalente a RESTRICT.

Obviamente para este ejemplo no queremos CASCADE,asi que bloquearemos con RESTRICT poder borrar cualquier registro para salvaguardar la integridad referencial.

Dado que no tengo datos puedo usar PhpMyAdmin para insertar datos.
También puedo exportar la base de datos,o una única tabla

					SQL -STRUCTURED QUERY LANGUAGE

Realmente este lenguaje tiene más de 50 años.Lo inventó IBM en los años 70 y aún se sigue usando dado su robustez.En 1979 Oracle inventó su DB y modificó un poco el lenguaje.
Hay varios gestores de bases de datos,y el lenguaje SQL puede variar un poco.

Tipos de Consultas:
CREATE DATABASE -> crear base de datos
DROP DATABASE -> eliminar una base de datos
CREATE TABLE -> crear una tabla
ALTER TABLE -> modificar una tabla
DROP TABLE -> eliminar una tabla

SELECT | INSERT | UPDATE | DELETE

				GESTIONAR SCHEMA

Agregar una base de datos:
CREATE DATABASE sistema_veterinaria;
Eliminar una base de datos:
DROP DATABASE IF EXISTS sistema_veterinaria;

* Para todo lo que es bases de datos normalmente se usa snakeCase(sistema_veterinaria),es decir guiones bajos.
Un SCHEMA es lo mismo que una DATABASE
	
					CREAR TABLAS

Para crear una tabla puedo usar este DDL:
CREATE TABLE usuarios(
 id int(11) NOT NULL AUTO_INCREMENT,
 nombre varchar(80) NOT NULL,
 apellido varchar(80) NOT NULL,
 fecha_nacimiento DATETIME NULL, <- recuerda no usar TIMESTAMP
 PRIMARY KEY(id)
);
DROP TABLE IF EXISTS usuarios;
SHOW COLUMNS FROM usuarios; <- para ver información sobre la tabla.Muy útil.
SELECT DATABASE(); <- para ver la database en la que estoy actualmente.Muy útil.
SHOW TABLES; <- para ver las tablas de la database en la que estoy.
NOTA: AUTO_INCREMENT es propio de MySQL,Otros gestores necesitan otro proceso.

					MODIFICAR TABLAS

Agregar columnas:
ALTER TABLE usuarios ADD COLUMN telefono varchar(45) NULL;
Eliminar columnas:
ALTER TABLE usuarios DROP telefono; <- también drop column <name>
Modificar columnas:
alter table usuarios alter column telefono varchar(35) null; <- ojo, es modify column en MySQL y no alter column

IMPORTANTE: si bajo la longitud de un campo el gestor va a cortar por esa longitud sin preguntar,hay que tener cuidado al alterar la longitud de columnas con datos.

NOTA: Lucas proporciona una web donde jugar y practicar con SQL:
http://sqlfiddle.com/


				AGREGAR, MODIFICAR Y ELIMINAR DATOS EN UNA TABLA

Para agregar datos es bastante sencillo,se usa la sentencia insert into:
insert into usuarios(nombre,apellido,fecha_nacimiento,telefono) values('Lucas','Moy','1998-04-04 10:00:00','123123123');

Para borrar una fila siempre debo proporcionar una condición.Se usa la sentencia delete from con una condición:
delete from usuarios where id='1';

Para modificar los datos de una tabla se usa la sentencia Update con un filtro.Recuerda que lleva SET separado por comas normales:
update usuarios set nombre='pepe',apellido='perez' where id=1;
REcuerda que dejo este tutorial con imagenes para consultarlo siempre

					CONSULTAR DATOS DE UNA TABLA

Para consultar datos en una tabla SQL se usa la sentencia select.Ejemplos:

select * from usuarios; <- busca todo
select * from usuarios where id=1; <- busca todo en base a ese filtro
select nombre,apellido from usuarios where id=1; <- muestra esos campos en base al filtro
select concat(nombre," ",apellido) as nombre_completo from usuarios where id=1; <- puedo combinar la salida de varias columnas en una sola y renombrar esa salida

select concat(nombre," ",apellido) as nombre_completo,fecha_nacimiento as fecha from usuarios;

IMPORTANTE:podria ver las sentencias update y delete como un put y un delete,es decir ,siempre van a necesitar un id,o de lo contrario actuan sobre todos los registros,mucho ojo con esto.
OBviamente el filtro puede ser cualquier campo,o incluso varios o una opción de varios:
select * from usuarios where apellido="Moy" or nombre ="Lucas";

COUNT: con count puedo contrario
select count(*) from usuarios where apellido='moira' <- dará 1.
Claro que es mejor darle un alias:
select count(*) as users from usuarios where apellido='moira';

LIKE:like en principio es igual que en =,pero mucho más potente ya que puedo usar caracteres especiales dentro de él,como el símbolo de porcentaje:
select * from usuarios where nombre like='luc%'; <- que empiece por
select * from usuarios where nombre like='%ucas'; <- que termine en 'ucas' y empiece por lo que sea

NOTA:puedo ver que la clausula where funciona en cualquier sentencia,aunque es obligatoria en los updates y deletes(si no quiero borrar todo).

					CLAVES FORÁNEAS

Para crear una llave foránea debo usar la sintaxis <foreign key(field from this table with the fk) references table(field).Por ejemplo,creemos una tabla publicaciones con la clave foranea autor_id,que referencia al id de nuestra tabla usuarios:
create table publicaciones (
  id int(11) auto_increment,
  autor_id int(11) not null,
  titulo varchar(80) not null,
  texto text not null,
  primary key(id), <- realmente puedo resumir esto
  foreign key (autor_id) references usuarios(id)); 

Desde luego es sencillo.Sin embargo,puedo apreciar que no es tán fácil ver quien tiene la clave foránea,por eso es altamente recomendable crear los diagramas primero.
Inserto alguna publicacion

En cuanto tenga tablas con llaves foraneas puedo realizar consultas más complejas
				
					CONSULTAR VARIAS TABLAS

Puedo consultar varias tablas de varias formas.Una muy comun es usando alias:
select p.*,concat(u.nombre,' ',u.apellido) as autor from publicaciones p,usuarios u where p.autor_id=u.id;

IMPORTANTE: puedo ver en la parte del from que estoy eligiendo dos tablas,además de darlas una abreviación(puedo abreviar una tabla pasando un alias automáticamente tras ella).Esto es imprescindible.
Lo mismo para pasarle el campo con la clave foránea.Fijate en el p.*

IMPORTANTE: usar esta forma de unir tablas no es lo más eficiente,ya que cuando pongo lógica en el lado del where la va a ejecutar por cada registro.Si tuviera miles de ellos por cada uno el gestor estaría ejecutando esa lógica,comparando tablas y buscando esa igualdad por cada registro.Obviamente no es eficiente.

Y justo por ello he especificado claves foráneas,al crear una clave foránea se crea un indice y buscar por un campo ya indexado es mucho más rápido

NOTA:fijate que la consulta primera funcionaría sin usar 'foreign key(autor_id) references usuarios(id),pues la lógica es correcta.Sin embargo esta sentencia creó un indice en el campo autor_id que debo usar por eficiencia.

					JOINS(CONSULTAS OPTIMIZADAS)

Con los joins puedo crear consultas muy optimizadas(debido a la indexación de los campos).Simplemente hay que pasar el tipo de join entre las tablas y cambiar where por on.Ejemplo:

select p.*,u.* from publicaciones p inner join usuarios u on p.autor_id=u.id;
* con natural join puedo evitar la parte del on:
select * from publicaciones natural join usuarios;

select count(distinct(texto) from usuarios natural join publicaciones; <- cuenta los distintos textos

En realidad hay muchos tipos,Lucas proporciona una imagen muy buena.Por ejemplo,si uso un left join de estas dos tablas me va a devolver todos los registros de la tabla de la izquierda,y solo los que cumplan estar relacionados entre usuarios y publicaciones,es decir me devuelve todos los usuarios y solo las publicaciones que tengan el campo_id:

mysql> select p.id,p.texto,u.nombre,u.apellido from usuarios u left join publicaciones p on u.id=p.autor_id;
+------+------------------------------------------+--------+----------+
| id   | texto                                    | nombre | apellido |
+------+------------------------------------------+--------+----------+
|    1 | publicacion primera de lucas             | lukaz  | moira    |
|    2 | publicacion segunda de lucas             | lukaz  | moira    |
|    3 | esta es la publicacion primera de obiwan | obiwan | kenobi   |
| NULL | NULL                                     | maria  | gracia   |
+------+------------------------------------------+--------+----------+
* Puedo ver que me devolverá todos los usuarios,independientemente de si tienen publicaciones o no,mientras que las publicaciones deben tener asociado un usuario

Viendo el gráfico puedo ver que puedo realizar cualquier virgeria,como por ejemplo devolver todos los usuarios y todas las publicaciones que no estén relacionadas.Ejemplo:
select * from usuarios u full outer join publicaciones p on u.id=p.autor_id where u.id is null or p.autor_id is null; 
+------+-------+--------+----------+
| id   | texto | nombre | apellido |
+------+-------+--------+----------+
| NULL | NULL  | maria  | gracia   |
+------+-------+--------+----------+
Obviamente sólo sale maria,que no tiene publicaciones.Observa que siempre estoy hablando de relaciones,clientes que tengan cuenta,clientes que no tengan cuenta,...Muy útil.

					SQL PARA ESTADISTICAS

Es muy común utilizar consultas SQL para sacar estadisticas,el registro minimo o maximo,por ejemplo con precios,para calcular promedios,o contar registros que cumplan determinadas condiciones.

Count(*) <- cuenta la cantidad de registros.Fijate que por defecto es filtro es *,es decir que no hay filtro y cuenta todo,por lo que puede ser util para contar una tabla rápidamente.

Max(filtro) <- devuelve el máximo de ese filtro
min(filtro) <- devuelve el mínimo de ese filtro
avg(filtro) <- devuelve el promedio(la media)
sum(filtro) <- devuelve la sumatoria o acumulado

select min(id) from usuarios; <- devuelve 1
select avg(id) from usuarios; <- devuelve 2.0000
select sum(id) from usuarios; <- devuelve 6 (1 +2 +3)

Fijate que siempre actuan sobre una columna

						SUBCONSULTAS

La idea de las subconsultas es pasar como argumentos para una consulta el resultado de otra consulta.POr ejemplo,en vez de realizar esto,ya que realmente yo no sé los ids de una tabla:
select * from publicaciones where autor_id in(1,2,3); <- como puedo saber los ids

Yo no sabré si son 3 o 500.Entonces lo que hago es realizar una consulta dentro de esa consulta:

select * from publicaciones where autor_id in(
  select id from usuarios  where nombre like 'L%' <- todos los usuarios que empiecen por L
);

usar IN y NOT IN suele ir acompañado de subconsultas,ya que es mejor traer los valores dinámicamente y no hardcodeados.

						CONCATENAR CONSULTAS

Para concatenar consultas se utiliza la palabar union.Por ejemplo:
select * from usuarios where nombre like "l%" union select * from usuarios where nombre like "p%";
NOTA: las consultas deben traer el mismo numero de columnas,no puede traer una tres columnas y otra dos

						AGRUPAR

Por último la claúsula group by <condition> agrupa en base a una condición,por ejemplo podriamos agrupar por nombre:
select * from usuarios group by edad;

Group by solo agrupa,pero puede ser útil para agrupar for fechas(usando month o year)
select * from usuarios group by year(fecha_nacimiento);

Una vez con esto claro puedo empezar a contar por ejemplo:
select count(*),month(fecha_nacimiento) from usuarios group by month(fecha_nacimiento); <- cuenta por mes

mysql> select count(*) as cantidad ,year(fecha_nacimiento)as año from usuarios group
by year(fecha_nacimiento);
+----------+------+
| cantidad | año  |
+----------+------+
|        2 | 1998 |
|        1 | 1999 |
+----------+------+


NOTA: Si tengo este error:

Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'returntr_prod.tbl_customer_pod_uploads.id' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by

will be simply solved by changing the sql mode in MySQL by this command,

SET GLOBAL sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY',''));
 
